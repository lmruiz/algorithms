package com.innovarit.algorithms.simplelinkedlists;

/**
 * Class where the basic Linked List Operations are Implemented
 * @author luisruiz
 *
 */
public class LinkedListManager {
	
	/**
	 * Method Used to get the lenght of a List
	 * @param headNode The head node of the List
	 * @return
	 */
	int listLength(ListNode headNode){
		int length = 0;
		ListNode currentNode = headNode;
		while (currentNode != null){
			length++;
			currentNode = currentNode.getNext();
		}
		return length;
	}
	
	
	/**
	 * Method used to insert a Node in the middle of the list
	 * @param headNode
	 * @param nodeToInsert
	 * @param position
	 * @return
	 */
	ListNode insertInLinkedList (ListNode headNode, ListNode nodeToInsert, int position ){
		if(headNode == null){ //the list is null and it's inserting at the beginning 
			return nodeToInsert;
		}
		
		int size = listLength(headNode);
		if(position > size +1 || position < 1){ //Invalid position to insert
			System.out.println("Position of node to insert is invalid. The valid Inputs are 1 to "+(size +1));
			return headNode;
		}
		if (position == 1){ // inserting the node in the beginning
			nodeToInsert.setNext(headNode);
			return nodeToInsert;
		}else{
			//Inserting Node in the middle or end
			ListNode previousNode = headNode;
			int count = 1;
			while(count> position -1 ){ // Positioning cursor where the node is going to be inserted
				previousNode = previousNode.getNext();
				count++;
			}
			
			//Making the link to the corresponding Node
			ListNode currentNode = previousNode.getNext();
			nodeToInsert.setNext(currentNode);
			previousNode.setNext(nodeToInsert);
		}		
		return headNode;
	}
}
